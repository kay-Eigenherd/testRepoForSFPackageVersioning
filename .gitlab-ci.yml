#
# GitLab CI/CD Pipeline for deploying DreamHouse App using Salesforce DX
#
#
# Run these commands before executing any build jobs,
# such as to install dependencies and set environment variables
#
before_script:
    # Install jq, a json parsing library
    - apt update && apt -y install jq
    # Setup SFDX environment variables
    # https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_cli_env_variables.htm
    - export SALESFORCE_CLI_URL=https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
    - export SFDX_AUTOUPDATE_DISABLE=false
    - export SFDX_USE_GENERIC_UNIX_KEYCHAIN=true
    - export SFDX_DOMAIN_RETRY=600
    - export SFDX_LOG_LEVEL=DEBUG
    # Install Salesforce CLI
    - mkdir sfdx
    - wget -qO- $SALESFORCE_CLI_URL | tar xJ -C sfdx --strip-components 1
    - './sfdx/install'
    - export PATH=./sfdx/$(pwd):$PATH
    # Output CLI version and plug-in information
    - sfdx update
    - sfdx --version
    - sfdx plugins --core
    # Authenticate to the Dev Hub from specified Auth URL
    - echo $PLAYGROUND_AUTH_URL > /tmp/sfdx.url
    - sfdx force:auth:sfdxurl:store --sfdxurlfile /tmp/sfdx.url --setalias "DevHub" --setdefaultdevhubusername
#
# Define the stages of our pipeline
#
stages:
    - Package-versioning

# The Trailhead provided yml created a new package version within a Scratch Org. We should consider wheather the package should
# be built from the DevHub or a Scratch Org
Package-versioning:
    stage: Package-versioning
    artifacts:
        paths:
            - PACKAGE_VERSION_ID.TXT
    script:
        # Deploy source to DevHub
        - sfdx force:source:deploy --targetusername DevHub --manifest package.xml
        - echo $PACKAGE_NAME
        # Create packaged version
        - export PACKAGE_VERSION_ID="$(eval sfdx force:package:version:create --package "$PACKAGE_NAME"  --installationkeybypass --targetdevhubusername DevHub --wait 10 --json | jq -r '.result.SubscriberPackageVersionId')"
        # TODO: build in fail on retrieved value == null
        # Save your PACKAGE_VERSION_ID to a file for later use during deploy so you know what version to deploy
        - echo "$PACKAGE_VERSION_ID" > PACKAGE_VERSION_ID.TXT
        - echo $PACKAGE_VERSION_ID

Package-Installation-testing:
    stage: Package-Installation-testing
    script:
        # Read the package version id from file created in prior stage
        - export PACKAGE_VERSION_ID=`cat ./PACKAGE_VERSION_ID.TXT`
        - echo $PACKAGE_VERSION_ID
        # Create scratch org
        - sfdx force:org:create --setdefaultusername --targetdevhubusername DevHub --wait 10 --durationdays 1 --setalias "PackageInstallationTestingScratchOrg" edition=developer
        # install package in SO through ID
        - sfdx force:package:install --wait 10 --publishwait 10 --package $PACKAGE_VERSION_ID --noprompt --targetusername PackageInstallationTestingScratchOrg
        # Run all Apex tests
        - sfdx force:apex:test:run --verbose --codecoverage --resultformat human
    after_script:
        # Delete Scratch Org
        - sfdx force:org:delete --noprompt --targetusername PackageInstallationTestingScratchOrg

Package-promotion:
    stage: Package-promotion
    # Will only promote the package if manually run
    when: manual
    script:
        # Read the package version id from file created in prior stage
        - export PACKAGE_VERSION_ID=`cat ./PACKAGE_VERSION_ID.TXT`
        - echo $PACKAGE_VERSION_ID
        # promote package out of beta status
        - sfdx force:package:version:promote --package $PACKAGE_VERSION_ID --targetdevhubusername DevHub